# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (5)
# #########################################################################

class Child_Condition(BaseModel):
    child_id: typing.Optional[str] = None
    reason: typing.Optional[str] = None
    required_MAT: typing.Optional[str] = None
    zone_name: typing.Optional[str] = None
    zone_id: typing.Optional[str] = None

class Happening(BaseModel):
    zone_id: typing.Optional[str] = None
    reason: typing.Optional[str] = None
    required_MAT: typing.Optional[str] = None
    zone_name: typing.Optional[str] = None

class Obligation(BaseModel):
    obligation: typing.Optional[typing.Union["Happening", "Child_Condition"]] = None

class Output(BaseModel):
    type: typing.Optional[typing.Union[str, str, str]] = None
    identifier: typing.Optional[str] = None
    help: typing.Optional[str] = None

class Zone(BaseModel):
    zone_id: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
